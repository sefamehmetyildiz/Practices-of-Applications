<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>